// <copyright file="PostOperationSync.cs" company="">
// Copyright (c) 2014 All Rights Reserved
// </copyright>
// <author></author>
// <date>12/18/2014 10:42:49 AM</date>
// <summary>Implements the PostOperationSync Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
namespace VACC.CRM.Sync.Plugins
{
    using System;
    using System.ServiceModel;
    using Microsoft.Xrm.Sdk;
    using Microsoft.Xrm.Sdk.Query;
    using System.Xml.Linq;
    using System.Xml.XPath;
    using System.Collections.Generic;
    using System.Text;
    using CRMSyncWeb;

    /// <summary>
    /// PostOperationSync Plugin.
    /// </summary>    
    public class PostOperationSync: Plugin
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostOperationSync"/> class.
        /// </summary>
        public PostOperationSync()
            : base(typeof(PostOperationSync))
        {
            // Register for ACCOUNT Entity
            base.RegisteredEvents.Add(new Tuple<int, string, string, Action<LocalPluginContext>>(40, "Create", "account", new Action<LocalPluginContext>(ExecutePostOperationSync)));
            base.RegisteredEvents.Add(new Tuple<int, string, string, Action<LocalPluginContext>>(40, "Update", "account", new Action<LocalPluginContext>(ExecutePostOperationSync)));
            base.RegisteredEvents.Add(new Tuple<int, string, string, Action<LocalPluginContext>>(40, "Delete", "account", new Action<LocalPluginContext>(ExecutePostOperationSync)));
            
            // Register for CONTACT Entity
            base.RegisteredEvents.Add(new Tuple<int, string, string, Action<LocalPluginContext>>(40, "Create", "contact", new Action<LocalPluginContext>(ExecutePostOperationSync)));
            base.RegisteredEvents.Add(new Tuple<int, string, string, Action<LocalPluginContext>>(40, "Update", "contact", new Action<LocalPluginContext>(ExecutePostOperationSync)));
            base.RegisteredEvents.Add(new Tuple<int, string, string, Action<LocalPluginContext>>(40, "Delete", "contact", new Action<LocalPluginContext>(ExecutePostOperationSync)));

            // Register for mcs_businessservice Entity
            base.RegisteredEvents.Add(new Tuple<int, string, string, Action<LocalPluginContext>>(40, "Create", "mcs_businessservice", new Action<LocalPluginContext>(ExecutePostOperationSync)));
            base.RegisteredEvents.Add(new Tuple<int, string, string, Action<LocalPluginContext>>(40, "Update", "mcs_businessservice", new Action<LocalPluginContext>(ExecutePostOperationSync)));
            base.RegisteredEvents.Add(new Tuple<int, string, string, Action<LocalPluginContext>>(40, "Delete", "mcs_businessservice", new Action<LocalPluginContext>(ExecutePostOperationSync)));
            
        }

        /// <summary>
        /// Executes the plug-in.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics CRM caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected void ExecutePostOperationSync(LocalPluginContext localContext)
        {

            if (localContext == null)
            {
                throw new ArgumentNullException("localContext");
            }
            
            // Obtain the execution context from the service provider:
            IPluginExecutionContext context = localContext.PluginExecutionContext;
            IOrganizationService service = localContext.OrganizationService;


            // What operation has triggered the plugin?
            string operation = context.MessageName.ToLower();

            
            string entityName = string.Empty;
            if (context.InputParameters != null && context.InputParameters.Contains("Target"))
            {
                // Which entity has triggered the plugin?
                if (context.InputParameters["Target"] is Entity)
                {
                    entityName = ((Entity)context.InputParameters["Target"]).LogicalName;
                }
                else if (context.InputParameters["Target"] is EntityReference)
                {
                     entityName = ((EntityReference)context.InputParameters["Target"]).LogicalName;
                } else
                {
                    service.Create(CreateLogEntity("error", "InputParameters[\"Target\"] is not an Entity / EntityReference"));     // log
                    return;
                }
/*/
                //make sure we get the minimum fields we require
                bool allRequired = false;
                
                // Get all configs for entity
                EntityCollection synchConfigs = service.RetrieveMultiple(GetSyncConfigurationsForEntityQueryExpression(entityName));

                // UPDATE or CREATE
                if (operation.Equals("update") || operation.Equals("create"))
                {
                    Entity entity = (Entity)context.InputParameters["Target"];
                    Entity completeEntity = service.Retrieve(entityName, entity.Id, new ColumnSet { AllColumns = true });

                    //check if create or update of entity from sync prospective
                    string syncedValues = string.Empty;
                    if (completeEntity.Contains("vacc_synced"))
                        syncedValues = completeEntity["vacc_synced"].ToString();

                    //string[] syncedItems = synced .Split(',');

                    foreach (var c in synchConfigs.Entities)
                    {
                        XDocument config = XDocument.Parse((c["vacc_xmldata"].ToString()));
                        //get the method name to call
                        XAttribute method = config.XPathSelectElement("/data").Attribute("method");
                        //get the name of any sync field values
                        XAttribute synced = config.XPathSelectElement("/data").Attribute("vacc_synced");
                        //get any field name for any expected responses.
                        XAttribute response = config.XPathSelectElement("/data/create").Attribute("response");

                        operation = whichString((syncedValues.IndexOf(synced.Value) > -1), "update", "create");

                        string xpath = "//" + operation + "//field";

                        if (int.Parse(config.XPathEvaluate("count(" + xpath + ")").ToString()) == 0)
                        {
                            service.Create(CreateLogEntity("warning", "No config found for entity: " + entityName));     // log
                            return;
                        }

                        Dictionary<string, string> fields;
                        if (syncedValues.IndexOf(synced.Value) == -1)
                            //we have not done the create
                            fields = getMatchingfields(service, completeEntity, config, xpath, out allRequired);
                        else
                            //we have the item
                            fields = getMatchingfields(service, entity, config, xpath, out allRequired);

                        //Dictionary<string, string> fields  = getMatchingfields(service, completeEntity, config, xpath, out allRequired);

                        //check if we have any criteria fields
                        xpath = "//data/" + operation + "/criteria";
                        if (int.Parse(config.XPathEvaluate("count(" + xpath + ")").ToString()) > 0)
                        {
                            //we have some criteria 
                            allRequired = CriteriaValid(service, whichEntity((syncedValues.IndexOf(synced.Value) > -1), entity, completeEntity), config, xpath);
                        }

                        //if we are doing a create, then check membership status
                        if (operation == "create" && allRequired)
                        {
                            if (entity.LogicalName == "account")
                                allRequired &= isMember(service, completeEntity);
                            else if (entity.LogicalName == "contact")
                                allRequired &= isMember(service, GetRelatedEntity("account", ((EntityReference)completeEntity["parentcustomerid"]).Id, service));
                        }

                        //for an update of account, if we have a financial status change, then pass to external source for processing this information
                        if (operation == "update" && entity.LogicalName == "account" && entity.Contains("mcs_financialstatus"))
                        {
                            bool valid = checkFinancialStatus(service, completeEntity);
                            fields.Add("isfinancial", valid.ToString());
                            fields.Add("memberof", getMemberType(service, completeEntity));
                        }

                        if (!allRequired)
                        {
                            service.Create(CreateLogEntity("warning", "No all required fields found entity: " + entityName));     // log
                            return;
                        }


                        if (fields.Count == 0)
                        {
                            service.Create(CreateLogEntity("warning", "No fields found in config for entity: " + entityName));     // log
                            return;
                        }


                        // Create a queue item
                        XDocument data = CreateQueueXMLData(entity.Id, Guid.Parse(getSyncObjectMappingExternalId(service, entity.Id)), entityName, synced, response, operation, fields, c["vacc_webserviceurl"].ToString(), method.Value, c["vacc_webserviceuser"].ToString(), c["vacc_webservicepwd"].ToString());

                        // Create new SecuritySynch Entity
                        Entity syncItem = new Entity("vacc_syncitem");
                        syncItem["vacc_itemreferenceid"] = entity.Id.ToString();
                        syncItem["vacc_xmldata"] = data.ToString();

                        // Save the new record
                        Guid id = service.Create(syncItem);
  
                        //TODO: if account, previously synced, and being made active then we need to sync all contacts
                        if (operation.Equals("update") && entityName.Equals("account") && (syncedValues.IndexOf(synced.Value) > -1) && entity.Contains("mcs_financialstatus") && checkFinancialStatus(service, completeEntity))
                        {
                            syncAllContacts(service, entity);
                        }
 
                    }
                }

/*/

            //currently we don't process deletes.
            if (context.MessageName.ToLower().Equals("delete"))
            {
                EntityReference entityRef = (EntityReference)context.InputParameters["Target"];
                service.Create(CreateLogEntity("Delete - warning", "Entity " + entityRef.LogicalName + " (" + entityRef.Id + ") deleted"));
                return;
            }


            Entity entity = (Entity)context.InputParameters["Target"];
            Entity completeEntity = service.Retrieve(entityName, entity.Id, new ColumnSet { AllColumns = true });


            switch (entityName)
            {
                case "account":
                    syncAccount(service, entity, completeEntity);
                    break;
                case "contact":
                syncContact(service, entity, completeEntity);
                    break;
            }
//*/

                        
                         
        /*
                // Activate/Disactivate entity
                else if (operation.Equals("setstate"))
                {
                    EntityReference entityRef = (EntityReference)context.InputParameters["Target"];

                    foreach (var c in synchConfigs.Entities)
                    {
                        Dictionary<string, string> fields = new Dictionary<string, string>();

                        XDocument config = XDocument.Parse((c["vacc_xmldata"].ToString()));
                        XAttribute method = config.XPathSelectElement("/data").Attribute("method");
                        XAttribute synced = config.XPathSelectElement("/data").Attribute("vacc_synced");
                        //get any field name for any expected responses.
                        XAttribute response = config.XPathSelectElement("/data/create").Attribute("response");

                        // Create a queue item
                        XDocument data = CreateQueueXMLData(entityRef.Id, Guid.Parse(getSyncObjectMappingExternalId(service, entityRef.Id)), entityName, synced, response, operation, fields, c["vacc_webserviceurl"].ToString(), method.Value, c["vacc_webserviceuser"].ToString(), c["vacc_webservicepwd"].ToString());

                        // Create new SecuritySynch Entity
                        Entity syncItem = new Entity("vacc_SyncItem");
                        syncItem["vacc_itemreferenceId"] = entityRef.Id.ToString();
                        syncItem["vacc_xmldata"] = data.ToString();

                        // Save the new record
                        service.Create(syncItem);
                    }
                }

                // DELETE
                else if (operation.Equals("delete"))
                {
                    EntityReference entityRef = (EntityReference)context.InputParameters["Target"];

                    Entity entity = new Entity(entityRef.LogicalName);
                    entity.Id = entityRef.Id;
                    entity[entityRef.LogicalName + "id"] = entityRef.Id;

                    foreach (var c in synchConfigs.Entities)
                    {
                        XDocument config = XDocument.Parse((c["vacc_xmldata"].ToString()));
                        //get the method name to call
                        XAttribute method = config.XPathSelectElement("/data").Attribute("method");
                        XAttribute synced = config.XPathSelectElement("/data").Attribute("vacc_synced");
                        //get any field name for any expected responses.
                        XAttribute response = config.XPathSelectElement("/data/create").Attribute("response");

                        string xpath = "//" + operation + "//field";

                        if (int.Parse(config.XPathEvaluate("count(" + xpath + ")").ToString()) == 0)
                        {
                            service.Create(CreateLogEntity("warning", "No config found for entity: " + entityName));     // log
                            return;
                        }

                        Dictionary<string, string> fields = getMatchingfields(service, entity, config, xpath, out allRequired);     

                        if (fields.Count == 0)
                        {
                            service.Create(CreateLogEntity("warning", "No fields found in config for entity: " + entityName));     // log
                            return;
                        }

                      
                        // Create a queue item
                        XDocument data = CreateQueueXMLData(entityRef.Id, Guid.Parse(getSyncObjectMappingExternalId(service, entityRef.Id)), entityName, synced, response, operation, fields, c["vacc_webserviceurl"].ToString(), method.Value, c["vacc_webserviceuser"].ToString(), c["vacc_webservicepwd"].ToString());

                        // Create new SecuritySynch Entity
                        Entity syncItem = new Entity("vacc_syncitem");
                        syncItem["vacc_itemreferenceid"] = entityRef.Id.ToString();
                        syncItem["vacc_xmldata"] = data.ToString();

                        // Save the new record
                        Guid id = service.Create(syncItem);



                    }
                }
*/
            }
        }

        #region Account

        private void syncAccount(IOrganizationService service, Entity account, Entity completeAccount, bool checkIfMemberActive = true)
        {
            //get the config for contact
            EntityCollection synchConfigs = service.RetrieveMultiple(GetSyncConfigurationsForEntityQueryExpression("account"));
            //make sure we get the minimum fields we require
            bool allRequired = false;


            foreach (var c in synchConfigs.Entities)
            {
                XDocument config = XDocument.Parse((c["vacc_xmldata"].ToString()));
                //get the method name to call
                XAttribute method = config.XPathSelectElement("/data").Attribute("method");
                //get the name of any sync field values
                XAttribute synced = config.XPathSelectElement("/data").Attribute("vacc_synced");
                //get any field name for any expected responses.
                XAttribute response = config.XPathSelectElement("/data/create").Attribute("response");

                //check if create or update of entity from sync prospective
                string syncedValues = string.Empty;
                if (completeAccount.Contains("vacc_synced"))
                    syncedValues = completeAccount["vacc_synced"].ToString();

                string operation = whichString((syncedValues.IndexOf(synced.Value) > -1), "update", "create");

                string xpath = "//" + operation + "//field";

                Dictionary<string, string> fields;
                if (syncedValues.IndexOf(synced.Value) == -1)
                    //we have not done the create
                    fields = getMatchingfields(service, completeAccount, config, xpath, out allRequired);
                else
                    //we have the item
                    fields = getMatchingfields(service, account, config, xpath, out allRequired);

                xpath = "//data/" + operation + "/criteria";
                if (int.Parse(config.XPathEvaluate("count(" + xpath + ")").ToString()) > 0)
                {
                    //we have some criteria 
                    allRequired = CriteriaValid(service, whichEntity((syncedValues.IndexOf(synced.Value) > -1), account, completeAccount), config, xpath);
                }

                //if we are doing a create, then check membership status
                if ((operation == "create" && allRequired) || checkIfMemberActive)
                {
                        allRequired &= isMember(service, completeAccount);
                }

                //for an update of account, if we have a financial status change, then pass to external source for processing this information
                if (operation == "update" && account.Contains("mcs_financialstatus"))
                {
                    bool valid = checkFinancialStatus(service, completeAccount);
                    fields.Add("isfinancial", valid.ToString());
                    fields.Add("memberof", getMemberType(service, completeAccount));
                }

                if (!allRequired)
                {
                    service.Create(CreateLogEntity("warning", "No all required fields found entity: " + account.LogicalName));     // log
                    return;
                }


                if (fields.Count == 0)
                {
                    service.Create(CreateLogEntity("warning", "No fields found in config for entity: " + account.LogicalName));     // log
                    return;
                }

                XDocument data = CreateQueueXMLData(account.Id, Guid.Parse(getSyncObjectMappingExternalId(service, account.Id)), "account", synced, response, operation, fields, c["vacc_webserviceurl"].ToString(), method.Value, c["vacc_webserviceuser"].ToString(), c["vacc_webservicepwd"].ToString());

                // Create new SecuritySynch Entity
                Entity syncItem = new Entity("vacc_syncitem");
                syncItem["vacc_itemreferenceid"] = account.Id.ToString();
                syncItem["vacc_xmldata"] = data.ToString();

                // Save the new record
                Guid id = service.Create(syncItem);

                //TODO: if account, previously synced, and being made active then we need to sync all contacts
                if (operation.Equals("update") && (syncedValues.IndexOf(synced.Value) > -1) && account.Contains("mcs_financialstatus") && checkFinancialStatus(service, completeAccount))
                {
                    syncAllContacts(service, account);
                }

            }
        }

        private bool isMember(IOrganizationService service, Entity entity)
        {
            bool valid = false;
            
            switch (getMemberType(service, entity))
            {
                case "vacc member":
                    valid = true;
                    break;
                case "tacc member":
                    valid = true;
                    break;
                default:
                    valid = false;
                    break;
            }

            return valid;
        }

        private bool checkFinancialStatus(IOrganizationService service, Entity entity)
        {
            string optionText = CRMHelper.getOptionSetText(service, entity.LogicalName, "mcs_financialstatus", ((Microsoft.Xrm.Sdk.OptionSetValue)entity["mcs_financialstatus"]).Value);

            return (optionText.Trim().ToLower() == "Active".Trim().ToLower());
        }

        private string getMemberType(IOrganizationService service, Entity entity)
        {
                       //Check that we are a member 
            EntityReference er = (EntityReference)entity["mcs_clienttype"];

            Entity clientType = GetRelatedEntity(er.LogicalName, er.Id, service);

            //valid &= (clientType["mcs_name"].ToString().ToLower() == "vacc member");
            return clientType["mcs_name"].ToString().ToLower();
 
        }

        #endregion

        #region Contacts

        private void syncAllContacts(IOrganizationService service, Entity account)
        {
            //get the config for contact
//            EntityCollection synchConfigs = service.RetrieveMultiple(GetSyncConfigurationsForEntityQueryExpression("contact"));
            //make sure we get the minimum fields we require
//            bool allRequired = false;
/*
            //XDocument config = XDocument.Parse(configItem);
            //get the method name to call
            XAttribute method = config.XPathSelectElement("/data").Attribute("method");
            //get the name of any sync field values
            XAttribute synced = config.XPathSelectElement("/data").Attribute("vacc_synced");
            //get any field name for any expected responses.
            XAttribute response = config.XPathSelectElement("/data/create").Attribute("response");
*/
/*
            //Create a query to retrieve attachments.
            QueryExpression query = new QueryExpression
            {
                EntityName = "contact",
                ColumnSet = new ColumnSet { AllColumns = true },

                //Define the conditions for each attachment.
                Criteria = new FilterExpression
                {
                    Conditions =
                    {
                        new ConditionExpression
                        {
                            AttributeName = "parentcontactid",
                            Operator = ConditionOperator.Equal,
                            Values = {account.Id}
                        }
                    }
                }
            };
*/
            ConditionExpression condition = new ConditionExpression();
            condition.AttributeName = "parentcustomerid";
            condition.Operator = ConditionOperator.Equal;
            condition.Values.Add(account.Id.ToString());

            // Create query expression.
            QueryExpression query = new QueryExpression();
            query.ColumnSet = new ColumnSet { AllColumns = true };
            query.EntityName = "contact";
            query.Criteria.AddCondition(condition);

            EntityCollection ec = service.RetrieveMultiple(query);

            foreach (Entity contact in ec.Entities)
            {
                syncContact(service, contact, contact, false);
            }            
        }

        private void syncContact(IOrganizationService service, Entity contact, Entity completeContact, bool checkIfMemberRelated = true)
        {
            //get the config for contact
            EntityCollection synchConfigs = service.RetrieveMultiple(GetSyncConfigurationsForEntityQueryExpression("contact"));
            //make sure we get the minimum fields we require
            bool allRequired = false;

 
            foreach (var c in synchConfigs.Entities)
            {
                XDocument config = XDocument.Parse((c["vacc_xmldata"].ToString()));
                //get the method name to call
                XAttribute method = config.XPathSelectElement("/data").Attribute("method");
                //get the name of any sync field values
                XAttribute synced = config.XPathSelectElement("/data").Attribute("vacc_synced");
                //get any field name for any expected responses.
                XAttribute response = config.XPathSelectElement("/data/create").Attribute("response");

                //check if create or update of entity from sync prospective
                string syncedValues = string.Empty;
                if (completeContact.Contains("vacc_synced"))
                    syncedValues = completeContact["vacc_synced"].ToString();

                string operation = whichString((syncedValues.IndexOf(synced.Value) > -1), "update", "create");

                string xpath = "//" + operation + "//field";

                Dictionary<string, string> fields;
                if (syncedValues.IndexOf(synced.Value) == -1)
                    //we have not done the create
                    fields = getMatchingfields(service, completeContact, config, xpath, out allRequired);
                else
                    //we have the item
                    fields = getMatchingfields(service, contact, config, xpath, out allRequired);

                //if we don't have any fields, then dont send anything
                if (fields.Count == 0)
                {
                    allRequired = false;
                    return;
                }

                xpath = "//data/" + operation + "/criteria";
                if (int.Parse(config.XPathEvaluate("count(" + xpath + ")").ToString()) > 0)
                {
                    //we have some criteria 
                    allRequired = CriteriaValid(service, whichEntity((syncedValues.IndexOf(synced.Value) > -1), contact, completeContact), config, xpath);
                }

                if (allRequired && checkIfMemberRelated)
                {
                    if (completeContact["parentcustomerid"] != null)
                        allRequired &= isMember(service, GetRelatedEntity("account", ((EntityReference)completeContact["parentcustomerid"]).Id, service));
                    else
                        allRequired = false;
                }

                if (!allRequired)
                {
                    service.Create(CreateLogEntity("warning", "No all required fields found entity: " + contact.LogicalName));     // log
                    return;
                }


                if (fields.Count == 0)
                {
                    service.Create(CreateLogEntity("warning", "No fields found in config for entity: " + contact.LogicalName));     // log
                    return;
                }

                    XDocument data = CreateQueueXMLData(contact.Id, Guid.Parse(getSyncObjectMappingExternalId(service, contact.Id)), "contact", synced, response, operation, fields, c["vacc_webserviceurl"].ToString(), method.Value, c["vacc_webserviceuser"].ToString(), c["vacc_webservicepwd"].ToString());

                // Create new SecuritySynch Entity
                Entity syncItem = new Entity("vacc_syncitem");
                syncItem["vacc_itemreferenceid"] = contact.Id.ToString();
                syncItem["vacc_xmldata"] = data.ToString();

                // Save the new record
                Guid id = service.Create(syncItem);
            }

        }
        
        #endregion

        private Entity whichEntity(bool condition, Entity entity1, Entity entity2)
        {
            if (condition)
                return entity1;
            else
                return entity2;
        }

        private string whichString(bool condition, string value1, string value2)
        {
            if (condition)
                return value1;
            else
                return value2;
        }

        private Dictionary<string, string> getMatchingfields(IOrganizationService service, Entity entity, XDocument config, string xpath, out bool allRequired)
        {
            Dictionary<string, string> fields = new Dictionary<string, string>();
            allRequired = true;

            foreach (XElement f in config.XPathSelectElements(xpath))
            {
                string val = f.Attribute("name").Value.ToLower();
                if (entity.Attributes.ContainsKey(val))
                {
                    string entityData = string.Empty;

                    if (entity[val] != null)
                    {
                        switch (entity[val].ToString())
                        {
                            case "Microsoft.Xrm.Sdk.EntityReference":
                                //check what type of entity
                                EntityReference er = (EntityReference)entity[val];
                                switch (er.LogicalName)
                                {
                                    case "account":
                                        entityData = er.Id.ToString();
                                        break;
                                    case "contact":
                                        entityData = er.Id.ToString();
                                        break;
                                    case "mcs_membershiptype":
                                        Entity e = GetRelatedEntity(er.LogicalName, er.Id, service);
                                        entityData = e["mcs_name"].ToString();
                                        break;
                                    //case "mcs_clienttype"
                                    default:
                                        entityData = er.LogicalName;
                                        break;
                                }


                                /*                            
                                                            if (er.LogicalName == "account")
                                                            {
                                                                entityData = er.Id.ToString();
                                                                switch (val)
                                                                {
                                                                    case "accountid":
                                                                        break;
                                                                    case "mcs_clienttype":
                                                                        Entity e = GetRelatedEntity(er.LogicalName, er.Id, service);
                                                                        entityData = e["mcs_name"].ToString();
                                                                        break;
                                                                }

                                                            }
                                                            else if (er.LogicalName == "contact")
                                                            {
                                                                entityData = er.Id.ToString();
                                                            }
                                                    */
                                //Check if we have a mapped attribute
                                if (f.Attribute("mapped") != null)
                                {
                                    if (bool.Parse(f.Attribute("mapped").Value))
                                        //check for mapping id
                                        entityData = getSyncObjectMappingExternalId(service, er.Id);
                                }
                                break;
                            case "Microsoft.Xrm.Sdk.OptionSetValue":
                                break;
                            default:
                                entityData = entity[val].ToString();
                                //Check if we have a mapped attribute

                                //Check if we have a mapped attribute
                                if (f.Attribute("mapped") != null)
                                {
                                    if (bool.Parse(f.Attribute("mapped").Value))
                                        //check for mapping id
                                        entityData = getSyncObjectMappingExternalId(service, Guid.Parse(entityData));
                                }
                                break;
                        }
                    }
                    else
                        entityData = "";
                    //fields.Add(f.Attribute("name").Value, entityData);       
                    fields.Add(getMappingName(f), entityData);
                }
                else
                {
                    if (f.Attribute("required")!= null && !bool.Parse(f.Attribute("required").Value))
                        allRequired &= false;
                }
            }

            return fields;
        }

        private bool matchFieldValue(IOrganizationService service, Entity entity, string childEntityField, string key, string value)
        {
            bool valid = false;

            switch (entity[key].ToString())
            {

                case "Microsoft.Xrm.Sdk.EntityReference":
                    //check what type of entity
                    EntityReference er = (EntityReference)entity[key];

                    Entity e = GetRelatedEntity(er.LogicalName, er.Id, service);

                    valid = checkAgainMultipleValues(e[childEntityField].ToString() , value); //valid = (e[childEntityField].ToString() == value);
                    
                    //make sure the value is not multiple items
                    break; 
                case "Microsoft.Xrm.Sdk.OptionSetValue":
                    string optionText = CRMHelper.getOptionSetText(service, entity.LogicalName, key, ((Microsoft.Xrm.Sdk.OptionSetValue)entity[key]).Value);

                    valid = checkAgainMultipleValues(optionText.Trim(), value); // valid = (optionText.Trim().ToLower() == value.Trim().ToLower());
                    break;
                default:
                    valid = checkAgainMultipleValues(entity[key].ToString() , value); //(entity[key].ToString() == value);
                    break;
            }

            return valid;
        }

        private bool checkAgainMultipleValues(string itemValue, string list)
        {
            List<string> items;

            list = list.ToLower();

            //check if we have sqr brackets arround values
            if (list.StartsWith("[") && list.EndsWith("]"))
            {
                list = list.Replace("[", "").Replace("]", "");                
                items = new List<string>(list.Split(','));
            }
            else
            {
                items = new List<string>();
                items.Add(list);
            }

            return items.Contains(itemValue.ToLower());
        }


        private bool CriteriaValid(IOrganizationService service, Entity entity, XDocument config, string xPath)
        {
            bool valid = true;
            foreach (XElement ele in config.XPathSelectElements(xPath))
            {
                //<criteria name="parentCustomerId" entity="account" entityfieldname="mcs_financialstatus" value="'Active'"/>
                //<criteria entityfieldname="mcs_financialstatus" value="'Active'"/>
                string name = string.Empty;
                string otherEntityName = string.Empty;
                string entityFieldName = string.Empty;
                string childfieldname = "";
                string value = string.Empty;
                Entity otherEntity = null;

                try
                {
                    //we need all this data otherwise fail
                    if (ele.Attribute("name") != null)
                        name = ele.Attribute("name").Value.ToString();
                    if (ele.Attribute("entity") != null)
                        otherEntityName = ele.Attribute("entity").Value.ToString();
                    if (ele.Attribute("childfieldname") != null)
                        childfieldname = ele.Attribute("childfieldname").Value.ToString();


                    entityFieldName = ele.Attribute("entityfieldname").Value.ToString();
                    value = ele.Attribute("value").Value.ToString();

                    if (otherEntityName.Trim().Length > 0)
                    {
                        otherEntity = GetRelatedEntity(otherEntityName, ((EntityReference)entity[name]).Id, service);
                    }
                    else
                        otherEntity = entity;

                    //valid = matchFieldValue(service, otherEntity, childfieldname, entityFieldName, value);
                    if (!matchFieldValue(service, otherEntity, childfieldname, entityFieldName, value))
                        return false;
                }
                catch (Exception ex)
                {
                    CreateLogEntity("error", ele.ToString() + "\n" + ex.Message);
                    return false; //should be false
                }


            }

            //for Contact, ParentCustomerId needs to be set
            //get account entity from parentCustomerId
            //check that ClientType = 'VACC Member' or 'TACC Member'
            //and mscFinancialStatus = 'Active'
            return valid;
        }


        private QueryExpression GetSyncConfigurationsForEntityQueryExpression(string entityName)
        {
            // Get all configurations for that entity.
            ConditionExpression ceEntityName = new ConditionExpression("vacc_entityname", ConditionOperator.Equal, entityName);
            ConditionExpression ceActive = new ConditionExpression("vacc_active", ConditionOperator.Equal, true);

            FilterExpression fe = new FilterExpression()
            {
                Conditions = { ceEntityName, ceActive }
            };

            QueryExpression qe = new QueryExpression()
            {
                EntityName = "vacc_syncconfiguration",
                ColumnSet = new ColumnSet()
                {
                    Columns = { "vacc_xmldata", "vacc_webserviceurl", "vacc_webserviceuser", "vacc_webservicepwd" }
                }
            };

            qe.Criteria.AddFilter(fe);

            return qe;
        }

        private Entity GetRelatedEntity(string entityName, Guid entityReferenceId, IOrganizationService service)
        {
            return service.Retrieve(entityName, entityReferenceId, new ColumnSet { AllColumns = true });
        }

        private XDocument CreateQueueXMLData(Guid crmId, Guid mappingid, string entity, XAttribute synced, XAttribute response, string action, Dictionary<string, string> fields, string wsurl, string methodName, string wsuser, string wspwd)
        {
            // Create document
            XDocument document =
                new XDocument(
                    new XDeclaration("1.0", Encoding.UTF8.HeaderName, String.Empty),
                    new XComment("CRM Sync Data")
                );

            // Create the data element
            XElement data = new XElement("data",
                                        new XAttribute("entity", entity),
                                        new XAttribute("action", action),
                                        new XAttribute("crmid", crmId),
                                        new XAttribute("mappingid", mappingid),
                                        synced != null? new XAttribute("synced", synced.Value): null,
                                        response != null ? new XAttribute("response", response.Value) : null,
//                                        new XAttribute("response", response),
                //new XAttribute("secid", secId),
                                        new XAttribute("wsurl", wsurl),
                                        new XAttribute("method", methodName),
                                        new XAttribute("wsuser", wsuser),
                                        new XAttribute("wspwd", wspwd)
                                    );

            // Populate the data element with the information we need to synch
            foreach (var f in fields)
            {
                data.Add(
                    new XElement("field",
                        new XAttribute("name", f.Key),
                        new XAttribute("value", f.Value)
                    )
                );
            }

            document.Add(data);

            return document;
        }


        private Entity CreateLogEntity(string type, string message)
        {
            Entity log = new Entity("vacc_synclog");
            log["vacc_logtype"] = type;
            log["vacc_logmessage"] = message;
            return log;
        }

         private Entity GetSyncObjectMapping(IOrganizationService service, Guid crmId)
        {
            // Get all configurations for that entity.
            ConditionExpression ceEntityName = new ConditionExpression("vacc_itemreferenceid", ConditionOperator.Equal, crmId.ToString());

            FilterExpression fe = new FilterExpression()
            {
                Conditions = { ceEntityName }
            };

            QueryExpression qe = new QueryExpression()
            {
                EntityName = "vacc_syncobjectmapping",
                ColumnSet = new ColumnSet { AllColumns = true }
            };

            qe.Criteria.AddFilter(fe);


            EntityCollection syncObjectMapping = service.RetrieveMultiple(qe);

            Entity e = null;

            if (syncObjectMapping.Entities.Count > 0)
            {
                e = syncObjectMapping.Entities[0];
            }

            return e;
        }

        private string getSyncObjectMappingExternalId(IOrganizationService service, Guid crmId)
        {
            string id = crmId.ToString();

            Entity entity = this.GetSyncObjectMapping(service, crmId);

            if (entity != null)
                id =  entity["vacc_externalobjectid"].ToString();
            
            return id;
        }

        private string getMappingName(XElement f)
        {
            string name = f.Attribute("name").Value;

            if (f.Attribute("mappingname") != null)
                name = f.Attribute("mappingname").Value;

            return name;
        }

    }
}
